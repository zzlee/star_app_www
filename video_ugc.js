VideoUgc = (function(){
	
	function constructor(mainTemplateId, subTemplateId, userContent, cbOfConstructor){
		
		//object's private members		
		var templateMgr = null;
		var template = null;
		var customizableObjects = [];
		var customizableObjectDimensions = {};
		var customizedContent = {};
		
		var uploadUserContent = function (imageUri, cbOfUploadUserContent) {
                        
            
        };
        
        var sendUserContentDescription = function(r) {
            
            customizedContent.timeStamp = (new Date()).toISOString();
            customizedContent.customizableObjects = JSON.stringify(customizableObjects);

            
            $.post(starServerURL+'/miix/videos/user_content_description', customizedContent, function(result){
                   console.dir("upload user data info result: "+result);
                   if ( !result.err ) {
                   }
                   })
            .error(function() {
                   });
        };

		
		var obj = {
			//==public services of VideoUgc==
			/**
			 * Get the preview image from Server (generated by AE)
			 */
			getPreviewImage: function(cbOfGetPreviewImage){
				
			},
			
			/**
			 * Ask AE server (via main server) to render Miix video
			 * 
			 * @param ugcProjectId
			 * @param ugcInfo
			 * @param cbOfAskServerToGenerate
			 */
			askServerToGenerate: function(ugcProjectId, ugcInfo, cbOfAskServerToGenerate){
				async.series([
					function(callback){
					    //upload user content file
						var options = new FileUploadOptions();
			            options.fileKey = "file";
			            options.fileName = userContent.picture.urlOfOriginal.substr(imageUri.lastIndexOf('/')+1);
			            options.mimeType = "image/jpeg"; //TODO: to have mimeType customizable? 
			            //options.mimeType = "image/png";
			            options.chunkedMode = true;
			            
			            var params = new Object();
			            params.fileObjectID = fileObjectID;
			            params.projectID = ugcProjectId;
			            params.croppedArea_x = userContent.picture.crop._x;
			            params.croppedArea_y = userContent.picture.crop._y;
			            params.croppedArea_width = userContent.picture.crop._w;
			            params.croppedArea_height = userContent.picture.crop._h;
			            params.obj_OriginalWidth = customizableObjectDimensions[fileObjectID].width;
			            params.obj_OriginalHeight = customizableObjectDimensions[fileObjectID].height;
			            params.osVersion = "iOS_"+device.version;            
			            
			            options.params = params;
			            options.chunkedMode = true;
			            
			            var ft = new FileTransfer();
			            
			            ft.onprogress = function(progressEvent) {
			                if (progressEvent.lengthComputable) {
			                    var uploadPercentage = progressEvent.loaded / progressEvent.total * 100;
			                    console.log("uploadPercentage=" + uploadPercentage.toString());
			                } else {
			                    console.log("upload some chunk....");
			                }
			            };
			            
			            var uploadSuccess_cb = function(r) {
			                console.log("Code = " + r.responseCode);
			                console.log("Response = " + r.response);
			                console.log("Sent = " + r.bytesSent);
			            };
			            
			            var uploadFail_cb = function() {
			            	
			            };
			            
			            
			            ft.upload(imageUri, starServerURL+"/miix/videos/user_content_files", uploadSuccess_cb, uploadFail_cb, options);

					    callback(null);
					},
					function(callback){
					    //send user content description
					    callback(null);
					}
				],
				// optional callback
				function(err, results){
				    // results is now equal to ['one', 'two']
				});
				
			}
		}; //end of obj
		
		async.series([
			function(callback){
			    //get templateMgr & template
				TemplateMgr.getInstance(function(err, _templateMgr){
					if (!err) {
						templateMgr = _templateMgr;
						template = templateMgr.getSubTemplate(mainTemplateId, subTemplateId);
						callback(null);
					}
					else {
						callback('Failed to get TemplateMgr instance');
					}
				});
			},
			function(callback){
				//get customizable objects info
		        $.ajax({
					url: templateMgr.getTemplateFolderPath()+'/'+mainTemplateId+'/'+subTemplateId+'/template_customizable_object_list.xml',
					dataType: 'xml',
					success: function(xmlDoc){
						var customizableObjectsXml = xmlDoc.getElementsByTagName("customizable_object");
			            
			            for (var i=0; i<customizableObjectsXml.length; i++) {
			                var objID = customizableObjectsXml[i].getElementsByTagName("ID")[0].childNodes[0].nodeValue;
			                var objFormat = customizableObjectsXml[i].getElementsByTagName("format")[0].childNodes[0].nodeValue;
			                var objDescription = customizableObjectsXml[i].getElementsByTagName("description")[0].childNodes[0].nodeValue;
			                var objKeyFrame = customizableObjectsXml[i].getElementsByTagName("key_frame")[0].childNodes[0].nodeValue;
			                
			                customizableObjectDimensions[objID] = {
				                width: customizableObjectsXml[i].getElementsByTagName("original_width")[0].childNodes[0].nodeValue,
			                    height: customizableObjectsXml[i].getElementsByTagName("original_height")[0].childNodes[0].nodeValue 
		                    };
			                
			                customizableObjects[i]={
			                	ID: objID,
			                	format: objFormat,
			                	description: objDescription,
			                	keyFrame: objKeyFrame
			                };
			                
			            }
			            callback(null);
					},
					error: function(jqXHR, textStatus, errorThrown){
						callback("Failed to read template_customizable_object_list.xml"+ errorThrown);
					}
				});
			}
		],
		function(err, results){
			if (!err) {
				cb_constructor(null, obj);
			}
			else {
				cb_constructor('Failed to initiate an VideoUgc object', null);
			}
		});

		
	}
	
	return {
		/**
		 * Get an instance of ImgaeUgc
		 * 
		 * @param {String} mainTemplateId
		 * @param {String} subTemplateId
		 * @param {Object} userContent An object describing user's content
		 *     <ul>
		 *     <li>text: text content
		 *     <li>picture: object
		 *         <ul>
		 *         <li>urlOfOriginal: the URL of the original picture that the user chooses
		 *         <li>urlOfCropped: the URL of the picture that the user crops. (It is normally a base64 string got from canvas.toDataURL() )
		 *         <li>crop: an object describing the cropped area
		 *             <ul>
		 *             <li>_x: _x=x_crop/width_picture
		 *             <li>_y: _y=y_crop/height_picture
		 *             <li>_w: _w=width_crop/width_picture
		 *             <li>_h: _h=height_crop/height_picture
		 *             </ul>
		 *         </ul>
		 *     <li>thumbnail: object
		 *         <ul>
		 *         <li>url: the URL of thumbnail
		 *         </ul>
		 *     </ul>
		 * @param {Function} cbOfGetInstance The callback function with the signature cbOfGetInstance (err, uInstance):
		 *     <ul>
		 *     <li>err: error message if any
		 *     <li>instance: instance of ImgaeUgc
		 *     </li>
		 */
		getInstance: function(mainTemplateId, subTemplateId, userContent, cbOfGetInstance){
			constructor(mainTemplateId, subTemplateId, userContent, function(err, instance){
				cbOfGetInstance(err, instance);
			});
		}
	};
})();